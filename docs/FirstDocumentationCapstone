Tech Stack
Frontend
•	React with JavaScript
•	Tailwind CSS for styling
•	BlockNote for text-based editing and collaboration
Backend
•	Node.js with Express.js
•	socket.io for real-time collaboration
•	JWT or Firebase for authentication and authorization

Database & Storage
•	Firebase Firestore for document storage
•	Firebase Authentication for user management

System Design Overview

High-Level Architecture:


Flowchart
    A[Client (React/Vite)] ----> B[Backend (Express/Bun)]
    A -- Socket.IO (WebSocket) --> B
    A -- (AuthContext/DocuContext) --> C[Firebase]

Low-Level Design

   Document Model: Each document has title, content (BlockNote blocks), roles, members, comments, timestamps.
   Folder Model: Folders are user-scoped, contain documents.
   User Model: Profile info, avatar, permissions.
   Socket.IO: Handles events like "joinDocument", "leaveDocument", "documentChange", "activeUsers", "cursorUpdate".
   Y-Sweet/Yjs: Provides advanced CRDT-based real-time editing, awareness (cursors, presence).



End Goals
•	 Users can create accounts and workspaces
•	 Basic block editing works (text, headings, lists)
•	 Real-time collaboration with 1+ users
•	 Page creation and navigation

Timeline & Priorities
Day 1-2: Setup with Basic Features
•	Project setup with React and Tiptap frontend
•	Express.js backend with Firebase integration
•	Basic authentication with JWT and Firebase
Day 3-4: Project Core Features
•	Document management system
•	Real-time collaboration with WebRTC
•	Basic editing and synchronization
Day 5: Checking for bugs and edge cases
•	Performance optimization
•	Testing 
•	Final Overview and Formatting codes

