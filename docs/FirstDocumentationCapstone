# Chotaa Notion – Project Documentation

## Overview

**Chotaa Notion** is a modern, collaborative document editing platform inspired by Notion. It enables users to create, edit, organize, and share documents and folders in real time. The platform features a rich text editor, real-time collaboration, comments, sharing with permissions, and a user-friendly interface designed for productivity and teamwork.

---

## Tech Stack

### Frontend
- **React** (with hooks, JSX, Bun runtime)
- **Vite** (fast development/build tool)
- **Tailwind CSS** (utility-first styling)
- **Lucide React** (icon library)
- **Firebase** (authentication, Firestore, storage)
- **Socket.IO** (real-time communication)
- **BlockNote + Y-Sweet/Yjs** (rich text editor with real-time sync)

### Backend
- **Node.js** (Bun runtime)
- **Express** (web server)
- **Socket.IO** (real-time server)
- **Firebase Admin SDK** (server-side Firebase)
- **CORS, dotenv** (security and configuration)

---

## Features

- **Authentication:** Email/password and Google login.
- **Document Management:** Create, edit, delete, and organize documents and folders.
- **Real-Time Collaboration:** Multiple users can edit the same document simultaneously, with live cursor and user presence indicators.
- **Comments & Permissions:** Add comments to specific text, resolve them, and manage permissions (viewer, editor, admin).
- **Rich Text Editing:** Modern, block-based editor with formatting and media support.
- **Dashboard:** View recent documents, search, and navigate easily.
- **Responsive Design:** Works seamlessly on desktop and mobile, with dark/light theme support.
- **Notifications & Profile:** User profile management and in-app notifications.

---

## System Design

- **Frontend:**  
  - Connects to the backend via Socket.IO for real-time updates.
  - Manages authentication, document operations, and UI state.
  - Uses BlockNote and Yjs for collaborative editing and comments.
- **Backend:**  
  - Manages stable socket connections and real-time events.
  - Handles authentication and authorization via Firebase Admin SDK.
  - Stores users, documents, folders, and comments in Firestore.

---

## UI/UX

- Clean, modern interface using Tailwind CSS and Rubik font.
- Sidebar navigation, dashboard, and modals for key actions.
- Visual indicators for active users and live cursors.
- Color scheme follows the 60-30-10 design rule.
- Fully responsive for both desktop and mobile.

---

## Performance

- **Client:**
  - Virtual scrolling for large documents.
  - Lazy loading for pages and assets.
- **Server:**
  - Connection pooling and caching.
  - Rate limiting for security and stability.

---

## Suggestions for Future Improvements

- Offline editing support.
- Document version history and rollback.
- Push/email notifications.
- Export/import options (PDF, Markdown, etc.).
- Advanced permission management.
- AI-powered features (summarization, suggestions).
- Dedicated mobile app.

---

## Getting Started

1. **Install dependencies:**
   - Frontend: `bun install`
   - Backend: `bun install`
2. **Set up environment variables:**
   - Configure `.env` files for Firebase and API URLs in both frontend and backend.
3. **Run the application:**
   - Frontend: `bun run dev`
   - Backend: `bun run`
4. **Open the app in your browser** and start collaborating!

---

## Folder Structure

```
project/
  frontend/
    src/
      components/
      contexts/
      pages/
      config/
      index.css
      main.jsx
    tailwind.config.js
    index.html
  backend/
    server.js
    package.json
    README.md
  docs/
    FirstDocumentationCapstone
```

---

## Contact & Contribution

For questions, suggestions, or contributions, please open an issue or pull request on the project repository.

---

**Chotaa Notion** – Empowering teams to collaborate, create, and organize knowledge in real time.
